openshift.withCluster() {
    env.NAMESPACE = openshift.project()

    env.POM_FILE = env.BUILD_CONTEXT_DIR ? "${env.BUILD_CONTEXT_DIR}/pom.xml" : "pom.xml"
}

def getPomFilePath(buildContextDir) {
    if (buildContextDir == '') {
        return "pom.xml"
    } else {
        return "${buildContextDir}/pom.xml"
    }
}

pipeline {

    agent {
        label 'maven'
    }

    stages {

        // Fetch the application source code (because it may be in a different repository)
        stage('Git Checkout') {
            steps {
                // Turn off Git's SSL cert check, uncomment if needed
                // sh 'git config --global http.sslVerify false'
                git url: "${APPLICATION_SOURCE_REPO}", branch: "${APPLICATION_SOURCE_REF}"

                script {
                    env.MAVEN_POM_FILE = getPomFilePath("${BUILD_CONTEXT_DIR}")
                    pom = readMavenPom(file: "${MAVEN_POM_FILE}")
                    env.MAVEN_GROUP_ID = pom.getGroupId()
                    env.MAVEN_ARTIFACT_ID = pom.getArtifactId()
                    env.MAVEN_BUILD_REVISION = new Date().format("yyyyMMddHHmmss")
                    env.MAVEN_FULL_VERSION = pom.getVersion().replace("\${revision}", "") + MAVEN_BUILD_REVISION
                    env.GIT_BUILD_TAG = "${MAVEN_ARTIFACT_ID}-${MAVEN_BUILD_REVISION}"
                }
            }
        }

        stage('Build') {
            steps {
                // Declarative pipeline automatically performs a checkout of the source code,
                // and if the sourceSecret attribute is set in the OpenShift BuildConfig,
                // then the repo will be cloned using the credentials in the Secret.

                // Create a custom credential helper that will return the username/password
                // to the repository, so we don't have to fiddle with the repo URL
                sh 'git config --local credential.helper "!p() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; p"'
                sh 'git config --global user.email jenkins@example.com'
                sh 'git config --global user.name jenkins'

                // NOTE: We could alternatively write some code here to get the highest numbered tag, and increment it by 1

                echo 'Tagging this commit with the build revision'

                sh 'git tag -fa -m "CI build revision ${MAVEN_BUILD_REVISION}" ${GIT_BUILD_TAG}'

                // Create a tag at the HEAD revision
                // To do this, we need to add credentials so that Jenkins can push tags
                withCredentials([usernamePassword(credentialsId: GIT_CREDENTIAL_ID,
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD')]) {
                    sh 'git push origin ${GIT_BUILD_TAG}'
                }

                // Compile the app into a JAR with Maven, and deploy the JAR to a Nexus
                echo 'üòâ -DskipTests=true, for all the true developers'
                sh "mvn -B clean install -DskipTests=true -Drevision=${MAVEN_BUILD_REVISION} -f ${MAVEN_POM_FILE}"

                // NOTE: We may alternatively deploy to Nexus here, using `clean deploy`
                // echo 'üíô Deploying to artifact repository...'
            }
        }

        stage('Bake') {
            steps {
                // NOTE: We might fetch the compiled artifact from Nexus here
                // Reminder: Single quotes disables Groovy string interpolation
                // echo 'üêû Fetch compiled artifact from Nexus repository'
                // sh 'mvn -B dependency:get -DgroupId=${MAVEN_GROUP_ID} -DartifactId=${MAVEN_ARTIFACT_ID} -Dversion=${MAVEN_BUILD_REVISION} -Dtransitive=false'
                // sh 'mvn -B dependency:copy -Dartifact=${MAVEN_GROUP_ID}:${MAVEN_ARTIFACT_ID}:${MAVEN_BUILD_REVISION} -DoutputDirectory=.'
                // sh 'mv ${MAVEN_ARTIFACT_ID}-${MAVEN_BUILD_REVISION}.jar application.jar'

                sh 'mv target/${MAVEN_ARTIFACT_ID}-${MAVEN_FULL_VERSION}.jar application.jar'
                
                //
                script {
                    openshift.withCluster() {
                        openshift.withCredentials() {
                            openshift.withProject() {
                                // Update the output image tag of the BuildConfig to the new build revision
                                openshift.patch("bc/${APPLICATION_NAME}",
                                        "'{ \"spec\": { \"output\": { \"to\": { \"name\": \"${APPLICATION_NAME}:${MAVEN_FULL_VERSION}\"}}}}'"
                                )

                                // Start the build, streaming in the binary JAR file
                                def buildConfig = openshift.selector("bc", "${APPLICATION_NAME}")
                                def build = buildConfig.startBuild('--from-file=application.jar')
                                build.logs('-f')
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy to DEV') {
            steps {
                echo 'We would do a deployment to Dev here.....'
                input message: 'Deploy to test?', ok: 'Yes'
            }
        }

        stage('Deploy to TEST') {
            agent {
                node {
                    label 'jenkins-slave-image-mgmt'
                }
            }
            steps {
                // publish to Quaaaaaay
                script {
                    env.IMAGE_SRC = "docker://docker-registry.default.svc:5000/tad-cicd/${APPLICATION_NAME}:${MAVEN_FULL_VERSION}"
                    env.IMAGE_DEST = "docker://quay-03ae.apps.shared.na.openshift.opentlc.com/${APPLICATION_NAME}:test-ready"
                }

                echo 'üê¶ Copying image to Quaaaaay...'
                // TODO: This should also be labelled with our version and commit hash
                sh "skopeo copy --authfile /var/run/secrets/kubernetes.io/dockerconfigjson/.dockerconfigjson ${IMAGE_SRC} ${IMAGE_DEST}"
            }
        }
    }
}
